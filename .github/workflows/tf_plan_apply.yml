name: Create terraform plan for DB

on:
  push:
    branches:
      - master
  workflow_dispatch:

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_SECRETS_ARN_RDS: ${{ secrets.AWS_SECRETS_ARN_RDS }}
  AWS_REGION: ${{ vars.AWS_REGION }}

jobs:
  get-credentials:
    name: "retrieve credentials from aws secret manager"
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Map AWS secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v1
        id: aws-secrets
        with:
          secret-ids: |
            ${{ secrets.AWS_SECRETS_ARN_RDS }}
          parse-json-secrets: true

      - name: Set the value
        id: step_one
        run: |
          echo "DB_USERNAME=$POS_TECH_DINER_RDS_SECRETS_DB_USERNAME" >> "$GITHUB_ENV"
          echo "DB_PASSWORD=$POS_TECH_DINER_RDS_SECRETS_DB_PASSWORD" >> "$GITHUB_ENV"

      - name: "Say it worked for god sake"
        run: echo "$DB_USERNAME $DB_PASSWORD. Today is the day $POS_TECH_DINER_RDS_SECRETS_DB_USERNAME $POS_TECH_DINER_RDS_SECRETS_DB_PASSWORD!"

    outputs:
      DB_USERNAME: ${{ steps.aws-secrets.outputs.POS_TECH_DINER_RDS_SECRETS_DB_USERNAME }}
      DB_PASSWORD: ${{ steps.aws-secrets.outputs.POS_TECH_DINER_RDS_SECRETS_DB_PASSWORD }}

  plan:
    name: "terraform plan"
    needs: get-credentials
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Inject secrets
        uses: cschleiden/replace-tokens@v1
        with:
          files: '["*.tf"]'
        env:
          DB_USERNAME: ${{ needs.get-credentials.outputs.DB_USERNAME }}
          DB_PASSWORD: ${{ needs.get-credentials.outputs.DB_PASSWORD }}

      # - name: Setup Terraform
      #   uses: hashicorp/setup-terraform@v1
      #   with:
      #     terraform_version: 1.7.4

      # - name: Terraform fmt
      #   id: fmt
      #   run: terraform fmt -check

      # - name: Terraform Init
      #   id: init
      #   run: terraform init

      # - name: Terraform Validate
      #   id: validate
      #   run: terraform validate -no-color

      # - name: Terraform Plan
      #   id: plandev
      #   run: terraform plan -no-color

      # - name: Terraform Apply
      #   run: terraform apply -auto-approve

      # - uses: actions/github-script@0.9.0
      #   if: github.event_name == 'pull_request'
      #   env:
      #     PLAN: "terraform\n${{ steps.plandev.outputs.stdout }}"
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
      #       #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
      #       #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
      #       #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
      #       <details><summary>Show Plan</summary>
      #       \`\`\`${process.env.PLAN}\`\`\`
      #       </details>
      #       *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;
      #       github.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: output
      #       })

  # apply:
  #   name: "terraform apply"
  #   needs: plan
  #   runs-on: ubuntu-latest

  #   defaults:
  #     run:
  #       shell: bash

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v1
  #       with:
  #         terraform_version: 0.15.5

  #     - name: Terraform fmt
  #       id: fmt
  #       run: terraform fmt -check

  #     - name: Terraform Init
  #       id: init
  #       run: terraform init

  #     - name: Terraform Validate
  #       id: validate
  #       run: terraform validate -no-color
